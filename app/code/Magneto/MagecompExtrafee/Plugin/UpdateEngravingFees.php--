<?php
/**
 * @author Magneto Team
 * @copyright Copyright (c) 2021 Magneto (https://www.magnetoitsolutions.com)
 * @package Magneto_Quote
 */

namespace Magneto\MagecompExtrafee\Plugin;

use Magecomp\Extrafee\Model\Quote\Total\Fee as EngravingFeeModel;
use Magento\Quote\Model\Quote;
use Magento\Quote\Model\Quote\Address;
use Magento\Quote\Model\Quote\Address\Total;

class UpdateEngravingFees extends \Magento\Quote\Model\Quote\Address\Total\AbstractTotal{

    protected $helperData;
    protected $_priceCurrency;
    protected $taxHelper;
    private $taxCalculator;
    /**
     * Collect grand total address amount
     *
     * @param \Magento\Quote\Model\Quote $quote
     * @param \Magento\Quote\Api\Data\ShippingAssignmentInterface $shippingAssignment
     * @param \Magento\Quote\Model\Quote\Address\Total $total
     * @return $this
     */
    protected $quoteValidator = null;

    public function __construct(\Magento\Quote\Model\QuoteValidator $quoteValidator,
                                \Magento\Framework\Pricing\PriceCurrencyInterface $priceCurrency,
                                \Magecomp\Extrafee\Helper\Data $helperData,
                                \Magecomp\Extrafee\Helper\Tax $helperTax,
                                \Magento\Tax\Model\Calculation $taxCalculator

    )
    {
        $this->quoteValidator = $quoteValidator;
        $this->_priceCurrency = $priceCurrency;
        $this->helperData = $helperData;
        $this->taxHelper = $helperTax;
        $this->taxCalculator = $taxCalculator;
    }
	
    public function afterCollect(EngravingFeeModel $subject, $result)
    {            
        // logging to test override    
        $logger = \Magento\Framework\App\ObjectManager::getInstance()->get('\Psr\Log\LoggerInterface');
        $logger->debug('Model Override Collect Test after');
        $result = $this->getFeesUpdate();
        
        return $result;
    }   
	public function getFeesUpdate(\Magento\Quote\Model\Quote $quote,
        \Magento\Quote\Api\Data\ShippingAssignmentInterface $shippingAssignment,
        \Magento\Quote\Model\Quote\Address\Total $total){

            $logger->debug('Model Override Collect Test after at getFeesUpdate');


            parent::collect($quote, $shippingAssignment, $total);
            if (!count($shippingAssignment->getItems())) {
                return $this;
            }

            $enabled = $this->helperData->isModuleEnabled();
            $minimumOrderAmount = $this->helperData->getMinimumOrderAmount();
            $subtotal = $total->getTotalAmount('subtotal');

            $logger->debug("minimumOrderAmount : ".$minimumOrderAmount." == Subtotal :".$subtotal);


            if ($enabled && $minimumOrderAmount <= $subtotal) {
                $fee = $this->helperData->getExtrafee();
                //Try to test with sample value
                //$fee=50;
                $total->setTotalAmount('fee', $fee);
                $total->setBaseTotalAmount('fee', $fee);
                $total->setFee($fee);
                $quote->setFee($fee);


                $objectManager = \Magento\Framework\App\ObjectManager::getInstance();
                $productMetadata = $objectManager->get('Magento\Framework\App\ProductMetadataInterface');
                $version = (float)$productMetadata->getVersion();

                if($version > 2.1)
                {
                    //$total->setGrandTotal($total->getGrandTotal() + $fee);
                }
                else
                {
                    $total->setGrandTotal($total->getGrandTotal() + $fee);
                }

                if ($this->taxHelper->isTaxEnabled()) {
                    $address = $this->_getAddressFromQuote($quote);
                    $this->_calculateTax($address, $total);

                    $extraTaxables = $address->getAssociatedTaxables();
                    $extraTaxables[] = [
                        'code' => 'fee',
                        'type' => 'fee',
                        'quantity' => 1,
                        'tax_class_id' => $this->taxHelper->getTaxClassId(),
                        'unit_price' => $fee,
                        'base_unit_price' => $fee,
                        'price_includes_tax' => false,
                        'associated_item_code' => false
                    ];

                    $address->setAssociatedTaxables($extraTaxables);
                }

            }
            return $this;

    }
    
}